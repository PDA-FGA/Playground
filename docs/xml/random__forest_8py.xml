<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="random__forest_8py" kind="file" language="Python">
    <compoundname>random_forest.py</compoundname>
    <innerclass refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model" prot="public">hygia::data_pipeline::model::random_forest::RandomForestModel</innerclass>
    <innernamespace refid="namespacehygia">hygia</innernamespace>
    <innernamespace refid="namespacehygia_1_1data__pipeline">hygia::data_pipeline</innernamespace>
    <innernamespace refid="namespacehygia_1_1data__pipeline_1_1model">hygia::data_pipeline::model</innernamespace>
    <innernamespace refid="namespacehygia_1_1data__pipeline_1_1model_1_1random__forest">hygia::data_pipeline::model::random_forest</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pickle</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>colorama<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Fore,<sp/>Style</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.ensemble<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>RandomForestClassifier</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.model_selection<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>train_test_split</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>accuracy_score</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>recall_score</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>f1_score</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sklearn.metrics<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>precision_score</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model" kindref="compound">RandomForestModel</ref>:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">presents<sp/>the<sp/>model<sp/>Random<sp/>Forest,<sp/>allowing<sp/>train<sp/>and<sp/>predict<sp/>the<sp/>model</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Examples<sp/>-<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>Use<sp/>this<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">like<sp/>this:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>\code{.py}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_rf_model<sp/>=<sp/>hg.RandomForestModel()</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clf,<sp/>scores<sp/>=<sp/>new_rf_model.train_and_get_scores(df,<sp/>concatened_column_name,<sp/>all_features_columns)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scores</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a0ac4c1072e5e85aa0c3ab41ac05b5d40" kindref="member">__init__</ref>(self,<sp/>model_file=None,<sp/>normalization_absolutes_file=None<sp/>,n_estimators=100,<sp/>max_depth=None,<sp/>random_state=0,<sp/>normalize=True):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Initialize<sp/>the<sp/>RandomForestModel<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>\param<sp/>model_file<sp/>(Type:<sp/>path)<sp/>Path<sp/>to<sp/>the<sp/>model<sp/>file</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a69bc06ee69d0634fa3ea4c83079d6eaf" kindref="member">normalize</ref><sp/>=<sp/>normalize</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ac014e58fd640d5ab0e64eb22ba0383d5" kindref="member">pre_trained</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>normalization_absolutes_file:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref><sp/>=<sp/>pd.read_csv(normalization_absolutes_file)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>model_file:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ac014e58fd640d5ab0e64eb22ba0383d5" kindref="member">pre_trained</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(model_file,<sp/></highlight><highlight class="stringliteral">&apos;rb&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref><sp/>=<sp/>pickle.load(f)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a5e7f43eeb0068f2d7f7f365434f3abc5" kindref="member">n_estimators</ref><sp/>=<sp/>n_estimators</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ae5dd6d72a32285fd8e86219a8fdf71ec" kindref="member">max_depth</ref><sp/>=<sp/>max_depth</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ae5ab8b176adb170adad2175c5685163c" kindref="member">random_state</ref><sp/>=<sp/>random_state</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref><sp/>=<sp/>RandomForestClassifier(n_estimators=self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a5e7f43eeb0068f2d7f7f365434f3abc5" kindref="member">n_estimators</ref>,<sp/>max_depth=self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ae5dd6d72a32285fd8e86219a8fdf71ec" kindref="member">max_depth</ref>,<sp/>random_state=self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ae5ab8b176adb170adad2175c5685163c" kindref="member">random_state</ref>)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_get_absolute_maximums(self,<sp/>df,<sp/>features_columns_to_normalize,<sp/>concatened_column_name):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref>:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>absolutes_dict<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>column<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>features_columns_to_normalize:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absolute_maximum<sp/>=<sp/>df[column].max()</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absolutes_dict[column.replace(f</highlight><highlight class="stringliteral">&quot;_{concatened_column_name}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)]<sp/>=<sp/>[absolute_maximum]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>absolute_maximum<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>[1.0]</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref><sp/>=<sp/>pd.DataFrame(absolutes_dict)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_normalization(self,<sp/>df,<sp/>features_columns_to_normalize,<sp/>concatened_column_name):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a69bc06ee69d0634fa3ea4c83079d6eaf" kindref="member">normalize</ref>:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>df</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>features_column_to_normalize<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>features_columns_to_normalize:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>column_absolute_maximum<sp/>=<sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref>[features_column_to_normalize.replace(f</highlight><highlight class="stringliteral">&quot;_{concatened_column_name}&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)].values[0]</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>df[features_column_to_normalize]<sp/>=<sp/>df[features_column_to_normalize]<sp/>/<sp/>column_absolute_maximum</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>df</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1acf7a38d78b4b8100bec3034415cf958e" kindref="member">train_and_get_scores</ref>(self,<sp/>df,<sp/>concatened_column_name,<sp/>all_features_columns,<sp/>test_size=0.3):</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Train<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>get<sp/>scores<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>model<sp/>execution.</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>\param<sp/>df<sp/>(DataFrame)<sp/>Dataframe<sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>\param<sp/>concatened_column_name<sp/>(Type:<sp/>str)<sp/>Column<sp/>name</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>\param<sp/>all_features_columns<sp/>(Type:<sp/>List)<sp/>List<sp/>of<sp/>all<sp/>features<sp/>column<sp/>nales</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>print(f&apos;{Fore.YELLOW}tranning<sp/>model...{Fore.WHITE}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Droping<sp/>Duplicates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>df_not_duplicates<sp/>=<sp/>df.drop_duplicates(subset=[concatened_column_name])</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Balancing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>KEY_SMASH_COUNT<sp/>=<sp/>df_not_duplicates[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">].value_counts()[</highlight><highlight class="stringliteral">&apos;key_smash&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>df_valid<sp/>=<sp/>df_not_duplicates[df_not_duplicates[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;valid&apos;</highlight><highlight class="normal">].sample(n=KEY_SMASH_COUNT,<sp/>random_state=42)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>df_invalid<sp/>=<sp/>df_not_duplicates[df_not_duplicates[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">]<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;valid&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>df_balanced<sp/>=<sp/>pd.concat([df_valid,<sp/>df_invalid])</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>df_balanced[</highlight><highlight class="stringliteral">&apos;is_key_smash&apos;</highlight><highlight class="normal">]<sp/>=<sp/>df_balanced[</highlight><highlight class="stringliteral">&apos;target&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;key_smash&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>key_smash_features_columns<sp/>=<sp/>[column<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>column<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_features_columns<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>column.startswith(</highlight><highlight class="stringliteral">&apos;feature_ks&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a487146fef6fedbbc18035178bd06bdd5" kindref="member">_get_absolute_maximums</ref>(df_balanced,<sp/>key_smash_features_columns,<sp/>concatened_column_name)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>df_balanced_normalized<sp/>=<sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1acf6c3db77f3a45bcd63b3c4ea0d9c472" kindref="member">_normalization</ref>(df_balanced.copy(),<sp/>key_smash_features_columns,<sp/>concatened_column_name)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Train/Test<sp/>split</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>df_balanced_normalized[[*all_features_columns]].values</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>df_balanced_normalized[</highlight><highlight class="stringliteral">&apos;is_key_smash&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>X_train,<sp/>X_test,<sp/>y_train,<sp/>y_test<sp/>=<sp/>train_test_split(X,<sp/>y,<sp/>test_size=test_size)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Train</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>clf=self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>clf.fit(X_train,y_train)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>y_pred<sp/>=<sp/>clf.predict(X_test)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Fore.GREEN}done{Fore.WHITE}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Fore.YELLOW}get<sp/>model<sp/>score...{Fore.WHITE}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Scoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>accuracy<sp/>=<sp/>accuracy_score(y_test,<sp/>y_pred)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>precision<sp/>=<sp/>precision_score(y_test,<sp/>y_pred)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>recall<sp/>=<sp/>recall_score(y_test,<sp/>y_pred)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f1_score(y_test,<sp/>y_pred)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Style.BRIGHT}accuracy<sp/>-&gt;<sp/>{Style.NORMAL}{accuracy}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Style.BRIGHT}precision<sp/>-&gt;<sp/>{Style.NORMAL}{precision}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Style.BRIGHT}recall<sp/>-&gt;<sp/>{Style.NORMAL}{recall}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Style.BRIGHT}f1<sp/>-&gt;<sp/>{Style.NORMAL}{f1}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>scores<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;accuracy&apos;</highlight><highlight class="normal">:<sp/>accuracy,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;precision&apos;</highlight><highlight class="normal">:<sp/>precision,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;recall&apos;</highlight><highlight class="normal">:<sp/>recall,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;f1&apos;</highlight><highlight class="normal">:<sp/>f1,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scores</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">predict(self,<sp/>X,<sp/>concatened_column_name):</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Fore.YELLOW}running<sp/>model...{Fore.WHITE}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>key_smash_features_columns<sp/>=<sp/>[column<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>column<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>X.columns<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>column.startswith(</highlight><highlight class="stringliteral">&apos;feature_ks&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1acf6c3db77f3a45bcd63b3c4ea0d9c472" kindref="member">_normalization</ref>(X.copy(),<sp/>key_smash_features_columns,<sp/>concatened_column_name)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref>.predict(X.values)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">export_model(self,<sp/>export_path:str,<sp/>normalization_absolutes_file_path:str)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&apos;{Fore.YELLOW}exporting<sp/>model<sp/>and<sp/>normalization<sp/>absolutes...{Fore.WHITE}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>pickle.dump(self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1a41a98e36844137b7486aa925a998f2c3" kindref="member">model</ref>,<sp/>open(export_path,<sp/></highlight><highlight class="stringliteral">&apos;wb&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classhygia_1_1data__pipeline_1_1model_1_1random__forest_1_1_random_forest_model_1ad3c46532103ddc6e4250e877372255fd" kindref="member">normalization_absolutes</ref>.to_csv(normalization_absolutes_file_path,<sp/>index=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/alvesisaque/workspace/Playground/hygia/data_pipeline/model/random_forest.py"/>
  </compounddef>
</doxygen>
